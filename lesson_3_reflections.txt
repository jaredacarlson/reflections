When would you want to use a remote repository rather than keeping all your
work local?

You would want to use a remote repository when you are sharing code or
collaborating on a project with other people.


Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

I may want to experiment with changes or keep my local repository at a specific
version in which case having Git automatically pull changes would thwart those
efforts.


Describe the differences between forks, clones, and branches. When would you
use one instead of another?

Forks - copy of a remote repository from someone else's account to your account
        on GitHub. You use it when you want to copy that person's repository
        and make changes to it, but do not have the permissions to do so.

Clones - Another method of copying a repository.  This is usually used to make
         a copy of a remote repository down to your local machine.  It can also
         be used to copy a local repository to another directory on your local
         machine.

Branch - A branch is a label for a set of commits that use the main branch,but
         "branch off" to make an experimental version of the code.  Commits can
         be added to both the master and branched versions of the code, which
         can then be merged back together if the new changes are fit for the
         master branch.


What is the benefit of having a copy of the last known state of the remote
stored locally?

The benefit is that you can compare your master branch to the locally stored
copy of remote.  Git status can then tell you if you are ahead or behind or in
conflict with origin/master.  You can also perform git diff to see the exact
differences in the files and to resolve the conflicts.


How would you collaborate without using Git or GitHub? What would be easier, and
what would be harder?

Collaboration would probably done within some directory structure on a server.
It may be easier to see everything that has been done in front of you, but
without using Git and GitHub to compare differences and resolve conflicts, it
would be very difficult to go through and do this by hand.


When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

You might make changes in a separate branch when your master branch is the
production branch and cannot be touched.  In addition, making changes to a
separate branch in this situation is easier when collaborating with other coders
on this project.  Making changes on a separate branch allows you to experiment
with changes while preserving the integrity of the production code.  On the
other hand, making changes to master directly makes for an easier merging
process although simultaneous merges from many collaborators could introduce
inconsistencies into the code base.
